########################## Components ##########################
 
Criar um componente anônimo: php artisan make:component layout –view

Caso a gente queira separar nosso componentes em pastas, como forms/input.blade.php, por exemplo, 
podemos sem problemas. Na hora de utilizá-lo, vamos referenciá-lo como <x-forms.input>, usando o . como 
separador. Assim podemos manter nossos componentes organizados.

########################## XSS ##########################

Usar filter_input() para limpar entrada de dados

########################## Laravel Mix ##########################

Instalar o node.js 

Rodar na raiz do projeto npm install bootstrap

Renomear ./resources/app.css para app.scss e adicionar linha: @import "~bootstrap/scss/bootstrap"

Editar o arquivo ./webpack.mix.js e adicionar: .sass('resources/css/app.scss', 'public/css');

Rodar comando npm run dev, irá baixar o plugin de sass (quando rodar a primeira vez)

Rodar comando npm run dev novamente

Adicionar ao href da tag link: {{ asset('css/app.css') }}

########################## Migrations ##########################

Rodar comando: php artisan make:migration <nome da migration>

Editar arquivo da migration em ./database/migrations

Rodar comando: php artisan migrate para criar as tabelas

########################## FormRequest ##########################

Criar request: php artisan make:request <nome-request> 

########################## Migrations ##########################

Se todos os nossos valores forem padrão ou corretamente configurados, podemos usar também o método foreignIdFor (que existe desde o Laravel 8) que recebe por parâmetro o nome da model ao invés do nome da coluna. Um exemplo, nesse nosso caso, seria:

$table->foreignIdFor(Serie::class)->constrained();

Nesse caso nós acabaríamos tendo a coluna como serie_id ao invés de series_id. Podemos ainda passar um segundo parâmetro para esse método, ficando:

$table->foreignIdFor(Serie::class, ‘series_id’)->constrained();